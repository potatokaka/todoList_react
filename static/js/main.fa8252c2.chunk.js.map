{"version":3,"sources":["todo.js","App.js","index.js"],"names":["Todo","props","delete","bind","mark","this","todo","deleteTodo","id","markTodo","className","isCompleted","checked","type","name","value","onChange","content","onClick","aria-hidden","Component","App","state","todos","newTodo","filter","handleChange","addTodo","handleKeyAdd","filterAll","filterDone","todoData","window","localStorage","getItem","jsonData","JSON","parse","setState","length","prevState","setItem","stringify","e","target","alert","key","item","map","onKeyPress","placeholder","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa8252c2.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.delete = this.delete.bind(this);\n    this.mark = this.mark.bind(this);\n  }\n\n  delete() {\n    const {todo, deleteTodo} = this.props;\n    deleteTodo(todo.id);\n  }\n\n  mark() {\n    const {todo, markTodo} = this.props; //去 call parent，讓 parent來處理\n    markTodo(todo.id); //目的是要提供id給 parent 的 markTodo 去執行\n  }\n\n  render() {\n    const {todo} = this.props;\n    return (\n      <li className={`list-group-item ${todo.isCompleted? 'done' : ''} `}>\n        <div className=\"form-check\">\n          <input className=\"form-check-input\" checked={todo.isCompleted} type=\"checkbox\" name=\"completion\" value={todo.isCompleted} onChange={this.mark}/>\n          <span className='todo_content'>{todo.content}</span>\n        </div>\n        <div>\n          <span className=\"btn-close\" onClick={this.delete}><i aria-hidden=\"true\" className=\"material-icons\">close</i></span>\n        </div>\n      </li>\n    )\n  }\n}\n\nexport default Todo;","import React, {Component} from 'react';\nimport Todo from './todo';\nimport './bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      newTodo: '',\n      filter: 'all', //預設是會看到所有的項目\n    }\n    this.id = 1\n\n    this.handleChange = this.handleChange.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n    this.handleKeyAdd = this.handleKeyAdd.bind(this);\n    this.deleteTodo = this.deleteTodo.bind(this);\n    this.markTodo = this.markTodo.bind(this);\n    this.filterAll = this.filterAll.bind(this);\n    this.filterDone = this.filterDone.bind(this);\n  }\n\n  // 初始化，把原 localStorage 裡的項目 render 出來\n  componentDidMount() {\n    const todoData = window.localStorage.getItem('todoApp');\n    if (todoData) {\n      const jsonData = JSON.parse(todoData);\n      this.setState({\n        todos: jsonData\n      })\n      this.id = jsonData[jsonData.length - 1].id + 1 // id 會變成陣列最後一個的 id，再加1，避免重覆\n    }\n  }\n\n  // 加入 localStorage\n  componentDidUpdate(prevState) {\n    if (prevState.todos !== this.state.todos) { //如果 todos 有變的話，就做…事情\n      window.localStorage.setItem('todoApp', JSON.stringify(this.state.todos)) //把狀態存到 state\n    }\n  }\n\n  handleChange(e) {\n    this.setState({\n      newTodo: e.target.value //把新 todo 的值帶入 state\n    })\n  }\n  \n  addTodo() {\n    const {newTodo, todos} = this.state;\n    if (newTodo !== '') {\n      this.setState({\n        todos: [...todos, {\n          id: this.id,\n          isCompleted: false,\n          content: newTodo\n        }],\n        newTodo: '', //清空 input 的內容\n      })\n      this.id++\n    } else {\n      alert('Please enter tasks!');\n    }\n  }\n\n  // 用鍵盤 Enter 新增 \n  handleKeyAdd(e) {\n    if (e.key === 'Enter') {\n      this.addTodo();\n    }\n  }\n\n  deleteTodo(id) {\n    this.setState({\n      todos: this.state.todos.filter(item => item.id !== id),\n    })\n  }\n\n  markTodo(id) {\n    this.setState({\n      todos: this.state.todos.map(item => {\n        if (item.id !== id) {\n          return item\n        }\n        return {\n          ...item, //解構寫法\n          isCompleted: !item.isCompleted\n        }\n      }),\n    })\n  }\n\n  filterAll() {\n    this.setState({\n      filter: 'all',\n    })\n  }\n\n  filterDone() {\n    this.setState({\n      filter: 'completed',\n    })\n  }\n\n  render() {\n    const {todos, newTodo, filter} = this.state;\n    return (\n      <div className=\"container\">\n        <div id=\"todo-list\" className=\"row justify-content-md-center\">\n          <div className=\"col-md-6\">\n\n            <div className=\"card\">\n              <h5 className=\"card-header\">Todo List</h5>\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">Thursday, 11th 2019</h5>\n                <p className=\"card-text\">Be yourself. Everyone else is taken.</p>\n                <div className=\"add-todo\">\n                  <input className=\"input-underlined\" value={newTodo} onChange={this.handleChange} onKeyPress={this.handleKeyAdd} placeholder=\"What to do\" />\n                  <div className=\"btn-submit\" onClick={this.addTodo}><i className=\"material-icons\">library_add</i></div>\n                </div>\n                <h6>Your Tasks</h6>\n                <div className=\"mb-3\">\n                  <button type=\"button\" className=\"btn btn-secondary mr-2\" onClick={this.filterAll}>All</button>\n                  <button type=\"button\" className=\"btn btn-light\" onClick={this.filterDone} >Done</button>\n                </div>\n              </div>\n            </div>\n\n            <ul className=\"list-group list-group-flush\">\n              {todos\n                .filter(item => filter === 'completed' ? item.isCompleted : true)\n                .map(item => (\n                  <Todo key={item.id} todo={item} deleteTodo={this.deleteTodo} markTodo={this.markTodo} />\n              ))}\n\n              {/* <li className=\"list-group-item done\">\n                <div className=\"form-check\">\n                  <input className=\"form-check-input\" type=\"checkbox\" value=\"\" />\n                  <span className='todo_content'>Breakfast</span>\n                </div>\n                <div>\n                    <span className=\"btn-close\"><i aria-hidden=\"true\" className=\"material-icons\">close</i></span>\n                </div>\n              </li> */}\n\n            </ul>\n            \n          </div>\n        </div>\n\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}